version: "3.6"
services:
  # Сервер с Django, сервер с API и админкой
  django:
    image: volodyabravo/globalmaps:backend
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./django.Dockerfile
    volumes:
      - ./docker/media/:/app/media/
      - ./docker/static/:/app/static/
    env_file:
      - ./.env
    depends_on:
      - postgres
    networks:
      - app
      - db

  # Сервер со статикой (nginx), точка входа в приложение, в нем лежат файлы frontend
  # и запросы к API проксируются на django
  nginx:
    image: volodyabravo/globalmaps:frontend
    build:
      context: ./
      dockerfile: ./nginx.Dockerfile
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./docker/static/:/app/djangostatic/
    # Порт 8080 для тестов, в продакшене не нужен, удалить, так как перед ним должен стояить реверс-прокси (traefik)
    ports:
      - 8080:8080
    networks:
      - app
      - proxy
    restart: unless-stopped
    depends_on:
      - django
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.maps.rule=Host(`stylemaps.ru`)
      - traefik.http.routers.maps.service=maps@docker
      - traefik.http.services.maps.loadbalancer.server.port=8080
      - traefik.http.routers.maps.entrypoints=websecure
      - traefik.http.routers.maps.tls=true
      - traefik.http.routers.maps.tls.certresolver=le

  # Сервер с базой данных (postgres)
  postgres:
    restart: unless-stopped
    image: postgres:13.4-alpine
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    ports:
      - 5432
    networks:
      - db
    env_file:
      - ./.env

  # Сервер с Puppeteer (Printer) не доступен извне
  puppet:
   image: volodyabravo/globalmaps:puppet
   restart: unless-stopped
   networks:
     - app
   env_file:
     - ./.env
   ports:
     - 6969

  # Реверс-прокси (настроить самостоятельно)
  # traefik:
  #   image: traefik:latest
  #   container_name: traefik
  #   restart: always
  #   command:
  #     - --entrypoints.web.address=:80
  #     - --entrypoints.websecure.address=:443
  #     - --providers.docker
  #     - --api
  #     - --api.dashboard=true
  #     - --log.level=DEBUG
  #     - --providers.docker.exposedbydefault=false
  #     - --certificatesresolvers.le.acme.email=alex@frozenalex.com
  #     - --certificatesresolvers.le.acme.storage=/letsencrypt/acme-le.json
  #     - --certificatesresolvers.le.acme.tlschallenge=true
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "./letsencrypt:/letsencrypt"
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.traefik.rule=Host(`traefik.stylemaps.ru`)
  #     - traefik.http.routers.traefik.service=api@internal
  #     - traefik.http.routers.traefik.entrypoints=websecure
  #     - traefik.http.routers.traefik.tls=true
  #     - traefik.http.routers.traefik.tls.certresolver=le
  #     # HTTPS
  #     - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:[a-z-.]+}`)"
  #     - "traefik.http.routers.http-catchall.entrypoints=web"
  #     - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
  #     - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  #   networks:
  #     - proxy
  #   depends_on:
  #     - nginx
    

volumes:
  local_postgres_data_backups:
  local_postgres_data:

networks:
  db:
  app:
  proxy:
    external: true